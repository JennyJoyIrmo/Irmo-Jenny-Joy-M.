#include <WiFi.h>
#include <WebServer.h>

#define WIFI_SSID "Blue"
#define WIFI_PASS "123456789"

const int ledPins[] = {2, 4, 16, 17, 18};
const int numLEDs = sizeof(ledPins) / sizeof(ledPins[0]);
const int sequencePins[] = {14, 27, 26, 25, 33};

WebServer server(80);

struct LEDController {
    bool toggleActive = false;
    bool sequenceActive = false;
    bool toggleState = true;
    unsigned long prevToggleTime = 0;
    unsigned long prevSequenceTime = 0;
    const unsigned long interval = 300;
    int step = 0;
    int direction = 1;
} ledControl;

void connectWiFi() {
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.print("Connected! IP Address: ");
    Serial.println(WiFi.localIP());
}

void initializeLEDs() {
    for (int pin : ledPins) {
        pinMode(pin, OUTPUT);
        digitalWrite(pin, LOW);
    }
}

void setLEDState(int state) {
    for (int pin : ledPins) {
        digitalWrite(pin, state);
    }
}

void handleRoot() {
    server.send(200, "text/html", "<html><head><title>ESP32 LED Control</title></head><body>"
                                "<h1>ESP32 LED Controller</h1>"
                                "<button onclick=\"fetch('/off')\">Turn OFF</button><br>"
                                "<button onclick=\"fetch('/on')\">Turn ON</button><br>"
                                "<button onclick=\"fetch('/toggle')\">Toggle</button><br>"
                                "<button onclick=\"fetch('/sequence')\">Sequence</button><br>"
                                "</body></html>");
}

void handleOff() {
    ledControl.toggleActive = ledControl.sequenceActive = false;
    setLEDState(LOW);
    server.send(200, "text/plain", "LEDs OFF");
}

void handleOn() {
    ledControl.toggleActive = ledControl.sequenceActive = false;
    setLEDState(HIGH);
    server.send(200, "text/plain", "LEDs ON");
}

void handleToggle() {
    ledControl.toggleActive = true;
    ledControl.sequenceActive = false;
    ledControl.prevToggleTime = millis();
    server.send(200, "text/plain", "Toggle Mode Activated");
}

void handleSequence() {
    ledControl.sequenceActive = true;
    ledControl.toggleActive = false;
    ledControl.prevSequenceTime = millis();
    ledControl.step = 0;
    ledControl.direction = 1;
    server.send(200, "text/plain", "Sequence Mode Activated");
}

void setup() {
    Serial.begin(115200);
    connectWiFi();
    initializeLEDs();

    server.on("/", handleRoot);
    server.on("/off", handleOff);
    server.on("/on", handleOn);
    server.on("/toggle", handleToggle);
    server.on("/sequence", handleSequence);

    server.begin();
    Serial.println("HTTP server started");
}

void loop() {
    server.handleClient();
    
    if (ledControl.toggleActive) {
        unsigned long currentMillis = millis();
        if (currentMillis - ledControl.prevToggleTime >= ledControl.interval) {
            ledControl.toggleState = !ledControl.toggleState;
            setLEDState(ledControl.toggleState ? HIGH : LOW);
            ledControl.prevToggleTime = currentMillis;
        }
    }

    if (ledControl.sequenceActive) {
        unsigned long currentMillis = millis();
        if (currentMillis - ledControl.prevSequenceTime >= ledControl.interval) {
            for (int i = 0; i < numLEDs; i++) {
                digitalWrite(sequencePins[i], LOW);
            }
            digitalWrite(sequencePins[ledControl.step], HIGH);
            ledControl.step += ledControl.direction;
            if (ledControl.step == numLEDs || ledControl.step < 0) {
                ledControl.direction = -ledControl.direction;
                ledControl.step += ledControl.direction;
            }
            ledControl.prevSequenceTime = currentMillis;
        }
    }
}
